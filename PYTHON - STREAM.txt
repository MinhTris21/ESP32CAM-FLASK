import cv2
import torch
import time
import numpy as np
import function.utils_rotate as utils_rotate
import function.helper as helper

ESP32_CAM_URL = "http://192.168.137.143/cam.mjpeg"

# Load YOLO models
yolo_LP_detect = torch.hub.load('yolov5', 'custom', path='model/LP_detector_nano_61.pt', source='local')
yolo_license_plate = torch.hub.load('yolov5', 'custom', path='model/LP_ocr_nano_62.pt', source='local')
yolo_license_plate.conf = 0.60

# Open MJPEG stream
cap = cv2.VideoCapture(ESP32_CAM_URL)

prev_frame_time = 0
consecutive_failures = 0
MAX_FAILURES = 5  # reconnect after 5 failed attempts

while True:
    ret, frame = cap.read()
    if not ret:
        print("[WARN] Failed to grab frame from stream.")
        consecutive_failures += 1
        time.sleep(0.5)

        if consecutive_failures >= MAX_FAILURES:
            print("[INFO] Reconnecting to ESP32-CAM stream...")
            cap.release()
            time.sleep(1)
            cap = cv2.VideoCapture(ESP32_CAM_URL)
            consecutive_failures = 0
        continue

    consecutive_failures = 0  # reset after successful frame

    # --- YOLO detection ---
    plates = yolo_LP_detect(frame, size=640)
    list_plates = plates.pandas().xyxy[0].values.tolist()
    list_read_plates = set()

    for plate in list_plates:
        flag = 0
        x, y, w, h = int(plate[0]), int(plate[1]), int(plate[2] - plate[0]), int(plate[3] - plate[1])
        crop_img = frame[y:y + h, x:x + w]
        cv2.rectangle(frame, (x, y), (x + w, y + h), color=(0, 0, 255), thickness=2)

        for cc in range(2):
            for ct in range(2):
                lp = helper.read_plate(yolo_license_plate, utils_rotate.deskew(crop_img, cc, ct))
                if lp != "unknown":
                    list_read_plates.add(lp)
                    cv2.putText(frame, lp, (x, y - 10), cv2.FONT_HERSHEY_COMPLEX, 1.5, (0, 0, 255), 1)
                    flag = 1
                    break
            if flag:
                break

    # --- FPS display ---
    new_frame_time = time.time()
    fps = int(1 / (new_frame_time - prev_frame_time)) if prev_frame_time > 0 else 0
    prev_frame_time = new_frame_time
    cv2.putText(frame, f"FPS: {fps}", (10, 50), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 1)

    cv2.imshow('ESP32-CAM Stream', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
